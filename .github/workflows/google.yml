name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - 'main'
jobs:
  setup-build-publish-deploy:
    env:
      PROJECT_ID: 'neat-striker-455607-i3'  # TODO: update to your Google Cloud project ID
      GAR_LOCATION: 'asia-southeast2'  # TODO: update to your region
      GKE_CLUSTER: 'noteus-cluster'  # TODO: update to your cluster name
      GKE_ZONE: 'asia-southeast1-a'  # TODO: update to your cluster zone
      DEPLOYMENT_NAME: 'noteus-deployment'  # TODO: update to your deployment name
      REPOSITORY: 'noteus-repo'  # TODO: update to your Artifact Registry docker repository name
      WORKLOAD_IDENTITY_PROVIDER: 'projects/669663908735/locations/global/workloadIdentityPools/github-action-pool/providers/github'  # TODO: update to your workload identity provider

    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      # Authenticate to Google Cloud using Workload Identity Federation
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'github-wif@neat-striker-455607-i3.iam.gserviceaccount.com'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'  # Ensure this outputs the correct token
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Set up GKE credentials
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'
          project_id: '${{ env.PROJECT_ID }}'

      # Enable command tracing for debugging
      - run: |
          set -x  # Enable command tracing for debugging
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      # Build and push Docker containers for all three services
      - name: 'Build and push Docker containers'
        run: |-
          gcloud auth configure-docker asia-southeast2-docker.pkg.dev
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain
          FRONTEND_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-frontend:${GITHUB_SHA}"
          DATABASE_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-database:${GITHUB_SHA}"
          API_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-api:${GITHUB_SHA}"
      
          echo "Building frontend container: $FRONTEND_TAG"
          docker build -f front-end/Dockerfile --tag "${FRONTEND_TAG}" front-end/
          docker push "${FRONTEND_TAG}"
      
          echo "Building database container: $DATABASE_TAG"
          docker build -f database/Dockerfile --tag "${DATABASE_TAG}" database/
          docker push "${DATABASE_TAG}"
      
          echo "Building API container: $API_TAG"
          docker build -f api/Dockerfile --tag "${API_TAG}" api/
          docker push "${API_TAG}"

      # Set up Kustomize for Kubernetes deployments
      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          chmod u+x ./kustomize
      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic secrets \
            --from-literal=GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --from-literal=GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --from-literal=NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
            --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            --from-literal=NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --from-literal=CLOUDINARY_CLOUD_NAME="${{ secrets.CLOUDINARY_CLOUD_NAME }}" \
            --from-literal=CLOUDINARY_API_KEY="${{ secrets.CLOUDINARY_API_KEY }}" \
            --from-literal=CLOUDINARY_API_SECRET="${{ secrets.CLOUDINARY_API_SECRET }}" \
            --from-literal=GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
            --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=ZILLIZ_CLOUD_URI="${{ secrets.ZILLIZ_CLOUD_URI }}" \
            --from-literal=ZILLIZ_CLOUD_TOKEN="${{ secrets.ZILLIZ_CLOUD_TOKEN }}" \
            --from-literal=LANGCHAIN_API_KEY="${{ secrets.LANGCHAIN_API_KEY }}" \
            --from-literal=LANGCHAIN_ENDPOINT="${{ secrets.LANGCHAIN_ENDPOINT }}" \
            --from-literal=USER_AGENT="${{ secrets.USER_AGENT }}" \
            --from-literal=HUGGINGFACE_TOKEN="${{ secrets.HUGGINGFACE_TOKEN }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      # Deploy to GKE using kustomize
      - name: 'Deploy to GKE'
        run: |-
          # Set the image tag with the commit SHA directly in the Kubernetes manifest files
          sed -i 's|asia-southeast2-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-api:.*|asia-southeast2-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-api:${GITHUB_SHA}|g' k8s/base/deployment.yaml
          sed -i 's|asia-southeast2-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-frontend:.*|asia-southeast2-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-frontend:${GITHUB_SHA}|g' k8s/base/deployment.yaml
          sed -i 's|asia-southeast2-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-database:.*|asia-southeast2-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/noteus-database:${GITHUB_SHA}|g' k8s/base/deployment.yaml
          
          # Apply the Kubernetes manifests directly
          kubectl apply -f k8s/base/deployment.yaml
          kubectl apply -f k8s/base/service.yaml
      
          # Wait for the deployment to complete
          kubectl rollout status deployment/$DEPLOYMENT_NAME
      
          # Check the status of services
          kubectl get services -o wide
